#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <iostream>

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

// settings
const unsigned int SCR_WIDTH = 920;
const unsigned int SCR_HEIGHT = 390;

float rotateAngle = 0.0;
float translate_X = -0.8;
float translate_Y = -0.8;
float scale_X = 1.5;
float scale_Y = 1.5;

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(0.388f, 0.55f, 0.87f, 0.5f);\n"
"}\n\0";

const char* vertexShaderSource2 = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource2 = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(0.188f, 0.165f, 0.47f, 1.0f);\n"
"}\n\0";

const char* vertexShaderSource3 = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource3 = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n"
"}\n\0";

const char* vertexShaderSource4 = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource4 = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(0.11f, 0.047f, 0.227f, 1.0f);\n"
"}\n\0";

const char* vertexShaderSource5 = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
//carbody color
const char* fragmentShaderSource5 = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(0.8509803921f, 0.46666667f, 0.058823529f, 1.0f);\n"
"}\n\0";

const char* vertexShaderSource6 = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource6 = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(0.2f, 0.067f, 0.55f, 1.0f);\n"
"}\n\0";
//car upper color
const char* vertexShaderSource31 = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource31 = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"  FragColor = vec4(0.98039f, 0.5843137f, 0.15686274f, 1.0f);\n"
"}\n\0";


void drawFrontWheelInsideCircle()
{
    float FrontWheel1[] = {
    0.435863107266995, 0.229311494624524, 0,
    0.438864077277503, 0.235990421146228, 0,
    0.443385740845525, 0.239319780130951, 0,
    0.447927612965807, 0.235960108317839, 0,
    0.450969000080834, 0.229260973243876, 0,
    0.45402049147199, 0.219217322770996, 0,
    0.454050804300379, 0.209183776574246, 0,
    0.452580632123514, 0.195810767116643, 0,
    0.45109025139439, 0.189126788456874, 0,
    0.448089281383881, 0.182447861935171, 0,
    0.445078207097243, 0.179113450812383, 0,
    0.440546439253091, 0.179128607226577, 0,
    0.437515156414194, 0.182483226901625, 0,
    0.435984358580551, 0.189177309837522, 0,
    0.434453560746908, 0.195871392773421, 0,
    0.432912658637135, 0.205909991108236, 0,
    0.432882345808746, 0.215943537304987, 0,
    0.432862137256487, 0.22263256810282, 0,
    0.443476679330692, 0.209219141540699, 0,
    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 19);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}

void drawFrontWheelInsideCircle2()
{
    float FrontWheel1[] = {
0.443476679330692,0.209219141540699,0,
0.399528130304744,0.256188869129415,0,
0.40098819820548,0.272906393985934,0,
0.403979063939859,0.282929835906555,0,
0.406949721121978,0.299642308625009,0,
0.411451176137741,0.309660698407565,0,
0.462750586048015,0.329556018106862,0,
0.467302562444426,0.322851830894834,0,
0.474906030231994,0.306103993209926,0,
0.476446932341767,0.296065394875111,0,
0.479498423732923,0.28602174440223,0,
0.481029221566567,0.279327661466332,0,
0.484090817233853,0.265939495594535,0,
0.487152412901139,0.252551329722738,0,
0.487213038557917,0.232484237329237,0,
0.48876404494382,0.219101123595505,0,
0.488824670600598,0.199034031202004,0,
0.487364602699862,0.182316506345485,0,
0.485894430522997,0.168943496887882,0,
0.484434362622261,0.152225972031363,0,
0.479953116158758,0.135518551450974,0,
0.475461765419125,0.122155646269501,0,
0.470970414679492,0.108792741088028,0,
0.466468959663729,0.0987743513054724,0,
0.449902998949155,0.0821073478296012,0,
0.442350052542235,0.0821326085199252,0,
0.431775927572548,0.0821679734863791,0,
0.421181594050602,0.0888923692506669,0,
0.413588230539164,0.102295691536657,0,
0.409005941314364,0.119033424945436,0,
0.404433756365693,0.132426642955298,0,
0.399851467140893,0.149164376364077,0,
0.396779767197478,0.16589705763479,0,
0.395198447983186,0.189313717565273,0,
0.470354053835583,0.312808180421954,0,
0.395147926602538,0.206036294559857,0,
0.395046883841241,0.239481448549025,0,
0.396537264570366,0.246165427208794,0,
0.395117613774149,0.216069840756608,0,
0.39507719666963,0.229447902352275,0,
0.396749454369089,0.175930603831541,0,
0.395178239430927,0.196002748363107,0,
0.399507921752485,0.262877899927248,0,
0.405469444668983,0.289613814566324,0,
0.426486339018672,0.333021784819335,0,
0.487182725729528,0.242517783525987,0,
0.488794357772209,0.209067577398755,0,
0.488844879152857,0.19234500040417,0,
0.485924743351386,0.158909950691132,0,
0.482954086169266,0.142197477972678,0,
0.478462735429633,0.128834572791205,0,
0.469480033950367,0.102108762428259,0,
0.463457885377091,0.0954399401826853,0,
0.47398148896613,0.112127152210815,0,
0.460456915366583,0.0887610136609811,0,
0.457445841079945,0.085426602538194,0,
0.454434766793306,0.0820921914154069,0,
0.445381335381133,0.0787779888448789,0,
0.439328873979468,0.0821427127960552,0,
0.4363076954167,0.0821528170721848,0,
0.428744644733651,0.0855225931614258,0,
0.424212876889499,0.0855377495756202,0,
0.419660900493088,0.0922419367876488,0,
0.415108924096677,0.0989461239996765,0,
0.41206753698165,0.105645259073639,0,
0.410536739148007,0.112339342009537,0,
0.418140206935575,0.0955915043246302,0,
0.407475143480721,0.125727507881335,0,
0.40290295853205,0.139120725891197,0,
0.401382264974537,0.142470293428178,0,
0.399831258588634,0.15585340716191,0,
0.398310565031121,0.159202974698892,0,
0.396729245816829,0.182619634629375,0,
0.395097405221889,0.222758871554441,0,
0.39802764529949,0.252849405868563,0,
0.409960795408616,0.302976719747797,0,
0.414462250424379,0.312995109530352,0,
0.417473324711017,0.31632952065314,0,
0.420484398997655,0.319663931775927,0,
0.423495473284293,0.322998342898714,0,
0.42951762185757,0.329667165144288,0,
0.432528696144208,0.333001576267076,0,
0.435539770430846,0.336335987389863,0,
0.438560948993614,0.336325883113733,0,
0.443092716837765,0.336310726699538,0,
0.447624484681917,0.336295570285344,0,
0.452156252526069,0.336280413871149,0,
0.45670822892248,0.329576226659122,0,
0.482570123676339,0.269289063131517,0,
0.48714230862501,0.255895845121655,0,
0.485621615067496,0.259245412658637,0
    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 91);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}

void drawFrontWheelInsideCircle3()
{
    float FrontWheel1[] = {
0.443476679330692, 0.209219141540699, 0,
0.387827378546601, 0.129137701075094, 0,
0.386296580712957, 0.135831784010993, 0,
0.384775887155444, 0.139181351547974, 0,
0.383234985045671, 0.14921994988279, 0,
0.381694082935898, 0.159258548217605, 0,
0.380153180826125, 0.16929714655242, 0,
0.380122867997736, 0.179330692749171, 0,
0.380102659445477, 0.186019723547004, 0,
0.380072346617088, 0.196053269743755, 0,
0.380052138064829, 0.202742300541588, 0,
0.380031929512569, 0.209431331339422, 0,
0.38001172096031, 0.216120362137256, 0,
0.379991512408051, 0.222809392935089, 0,
0.379971303855791, 0.229498423732923, 0,
0.379951095303532, 0.236187454530757, 0,
0.379930886751273, 0.24287648532859, 0,
0.379910678199013, 0.249565516126424, 0,
0.381401058928138, 0.256249494786193, 0,
0.381380850375879, 0.262938525584026, 0,
0.382871231105003, 0.269622504243795, 0,
0.382840918276614, 0.279656050440546, 0,
0.384331299005739, 0.286340029100315, 0,
0.385821679734863, 0.293024007760084, 0,
0.387312060463988, 0.299707986419852, 0,
0.388802441193113, 0.306391965079621, 0,
0.390292821922237, 0.31307594373939, 0,
0.393293791932746, 0.319754870261094, 0,
0.396294761943254, 0.326433796782798, 0,
0.397785142672378, 0.333117775442567, 0,
0.400786112682887, 0.339796701964271, 0,
0.405297671974779, 0.34647057634791, 0,
0.402276493412012, 0.346480680624039, 0,
0.406788052703904, 0.353154555007679, 0,
0.408278433433028, 0.359838533667447, 0,
0.411289507719667, 0.363172944790235, 0,
0.414290477730175, 0.369851871311939, 0,
0.417301552016813, 0.373186282434726, 0,
0.420312626303451, 0.376520693557513, 0,
0.424834289871473, 0.379850052542235, 0,
0.429355953439495, 0.383179411526957, 0,
0.432377132002263, 0.383169307250828, 0,
0.435398310565031, 0.383159202974698, 0,
0.438419489127798, 0.383149098698568, 0,
0.441440667690566, 0.383138994422439, 0,
0.444461846253334, 0.383128890146309, 0,
0.448993614097485, 0.383113733732115, 0,
0.453525381941637, 0.38309857731792, 0,
0.456546560504405, 0.38308847304179, 0,
0.459577843343302, 0.379733853366744, 0,
0.464119715463584, 0.376374181553633, 0,
0.467150998302481, 0.373019561878586, 0,
0.468671691859995, 0.369669994341605, 0,
0.471702974698892, 0.366315374666558, 0,
0.474744361813919, 0.359616239592595, 0,
0.477775644652816, 0.356261619917549, 0,
0.480817031767844, 0.349562484843585, 0,
0.483858418882871, 0.342863349769622, 0,
0.486899805997898, 0.336164214695658, 0,
0.489941193112925, 0.329465079621695, 0,
0.491471990946568, 0.322770996685797, 0,
0.494513378061595, 0.316071861611833, 0,
0.496044175895238, 0.309377778675935, 0,
0.497574973728882, 0.302683695740036, 0,
0.499115875838655, 0.292645097405221, 0,
0.500646673672298, 0.285951014469323, 0,
0.502187575782071, 0.275912416134507, 0,
0.503728477891843, 0.265873817799692, 0,
0.505269380001616, 0.255835219464877, 0,
0.505299692830005, 0.245801673268126, 0,
0.505319901382265, 0.239112642470293, 0,
0.505360318486783, 0.225734580874625, 0,
0.506850699215908, 0.232418559534394, 0,
0.505390631315172, 0.215701034677875, 0,
0.505410839867432, 0.209012003880042, 0,
0.505431048419691, 0.202322973082208, 0,
0.50545125697195, 0.195633942284374, 0,
0.505471465524209, 0.18894491148654, 0,
0.505501778352598, 0.17891136528979, 0,
0.504011397623474, 0.172227386630021, 0,
0.504031606175733, 0.165538355832187, 0,
0.502541225446609, 0.158854377172419, 0,
0.501050844717484, 0.15217039851265, 0,
0.499570568264489, 0.142141904453965, 0,
0.501071053269743, 0.145481367714817, 0,
0.498080187535365, 0.135457925794196, 0,
0.498100396087624, 0.128768894996362, 0,
0.496610015358499, 0.122084916336593, 0,
0.495119634629375, 0.115400937676824, 0,
0.49362925390025, 0.108716959017055, 0,
0.490628283889742, 0.102038032495351, 0,
0.489137903160617, 0.095354053835583, 0,
0.486136933150109, 0.0886751273138792, 0,
0.4831359631396, 0.081996200792175, 0,
0.481645582410476, 0.075312222132406, 0,
0.478634508123838, 0.0719778110096194, 0,
0.475633538113329, 0.0652988844879152, 0,
0.472622463826691, 0.0619644733651276, 0,
0.471121978821437, 0.0586250101042762, 0,
0.468110904534799, 0.0552905989814886, 0,
0.465099830248161, 0.0519561878587016, 0,
0.463599345242906, 0.0486167245978497, 0,
0.460588270956268, 0.0452823134750626, 0,
0.45757719666963, 0.041947902352275, 0,
0.454566122382992, 0.0386134912294884, 0,
0.451544943820224, 0.038623595505618, 0,
0.448523765257456, 0.0386336997817475, 0,
0.445512690970818, 0.03529928865896, 0,
0.442491512408051, 0.0353093929350896, 0,
0.439470333845283, 0.0353194972112196, 0,
0.436449155282515, 0.0353296014873492, 0,
0.433417872443618, 0.0386842211623958, 0,
0.428876000323336, 0.0420438929755069, 0,
0.425844717484439, 0.0453985126505536, 0,
0.421302845364158, 0.048758184463665, 0,
0.41827156252526, 0.0521128041387113, 0,
0.413729690404979, 0.0554724759518223, 0,
0.410698407566082, 0.058827095626869, 0,
0.409177714008568, 0.0621766631638505, 0,
0.406136326893541, 0.0688757982378143, 0,
0.404615633336027, 0.0722253657747962, 0,
0.403084835502384, 0.0789194487106943, 0,
0.400043448387357, 0.0856185837846577, 0,
0.39700206127233, 0.092317718858621, 0,
0.395471263438687, 0.0990118017945191, 0,
0.393950569881173, 0.1023613693315, 0,
0.39242987632366, 0.105710936868482, 0,
0.389388489208633, 0.112410071942445, 0,
0.387857691374989, 0.119104154878344, 0,
0.386326893541346, 0.125798237814242, 0
    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 130);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);

}
void drawFrontWheelInsideCircle4()
{
    float FrontWheel1[] = {
0.196275563818608,0.0327883760407403,0,
0.191743795974456,0.0328035324549347,0,
0.188722617411688,0.0328136367310643,0,
0.185691334572791,0.0361682564061105,0,
0.182660051733893,0.0395228760811576,0,
0.179638873171126,0.0395329803572872,0,
0.176607590332228,0.0428876000323334,0,
0.173576307493331,0.0462422197073801,0,
0.170545024654433,0.0495968393824264,0,
0.167513741815536,0.0529514590574731,0,
0.164482458976638,0.0563060787325193,0,
0.161451176137741,0.059660698407566,0,
0.159930482580228,0.0630102659445475,0,
0.15689919974133,0.0663648856195942,0,
0.155378506183817,0.0697144531565756,0,
0.153857812626303,0.0730640206935575,0,
0.15232701479266,0.0797581036294561,0,
0.149295731953762,0.0831127233045023,0,
0.147775038396249,0.0864622908414842,0,
0.146254344838735,0.0898118583784657,0,
0.144723547005092,0.0965059413143643,0,
0.143202853447579,0.0998555088513457,0,
0.141672055613935,0.106549591787243,0,
0.140141257780292,0.113243674723142,0,
0.138620564222779,0.116593242260124,0,
0.137089766389135,0.123287325196023,0,
0.135548864279363,0.133325923530838,0,
0.134018066445719,0.140020006466736,0,
0.13400796216959,0.143364521865653,0,
0.13399785789346,0.14670903726457,0,
0.133977649341201,0.153398068062403,0,
0.133957440788941,0.160087098860237,0,
0.135457925794196,0.163426562121089,0,
0.136968515075579,0.163421509983025,0,
0.139989693638347,0.163411405706895,0,
0.144521461482499,0.1633962492927,0,
0.147542640045267,0.163386145016571,0,
0.150563818608034,0.163376040740441,0,
0.155095586452186,0.163360884326246,0,
0.158116765014954,0.163350780050117,0,
0.159637458572467,0.160001212513135,0,
0.161137943577722,0.163340675773987,0,
0.164159122140489,0.163330571497858,0,
0.167180300703257,0.163320467221728,0,
0.170201479266025,0.163310362945598,0,
0.174733247110177,0.163295206531404,0,
0.179265014954328,0.163280050117209,0,
0.182286193517096,0.16326994584108,0,
0.186817961361248,0.163254789426885,0,
0.191349729205399,0.163239633012691,0,
0.197392086330935,0.163219424460431,0,
0.194370907768167,0.163229528736561,0,
0.200413264893703,0.163209320184302,0,
0.20343444345647,0.163199215908172,0,
0.204945032737854,0.163194163770107,0,
0.206455622019238,0.163189111632042,0,
0.209476800582006,0.163179007355913,0,
0.212497979144774,0.163168903079783,0,
0.215519157707541,0.163158798803654,0,
0.218540336270309,0.163148694527524,0,
0.221561514833077,0.163138590251394,0,
0.224582693395845,0.163128485975264,0,
0.226093282677228,0.1631234338372,0,
0.229114461239996,0.16311332956107,0,
0.232135639802764,0.16310322528494,0,
0.233646229084148,0.163098173146875,0,
0.236667407646916,0.163088068870746,0,
0.239688586209683,0.163077964594616,0,
0.242709764772451,0.163067860318486,0,
0.245730943335219,0.163057756042357,0,
0.251773300460754,0.163037547490097,0,
0.248752121897987,0.163047651766227,0,
0.254794479023522,0.163027443213968,0,
0.25781565758629,0.163017338937838,0,
0.260836836149058,0.163007234661709,0,
0.260857044701317,0.156318203863875,0,
0.260877253253576,0.149629173066041,0,
0.260897461805836,0.142940142268208,0,
0.259407081076711,0.136256163608439,0,
0.259427289628971,0.129567132810605,0,
0.257926804623716,0.126227669549753,0,
0.256436423894592,0.119543690889984,0,
0.254946043165467,0.112859712230215,0,
0.253455662436343,0.106175733570446,0,
0.251965281707218,0.0994917549106779,0,
0.250464796701964,0.096152291649826,0,
0.248974415972839,0.089468312990057,0,
0.247473930967585,0.0861288497292056,0,
0.245973445962331,0.0827893864683533,0,
0.244472960957077,0.0794499232075014,0,
0.242972475951822,0.0761104599466491,0,
0.241471990946568,0.0727709966857976,0,
0.239971505941314,0.0694315334249453,0,
0.23846091665993,0.0694365855630101,0,
0.236970535930805,0.0627526069032411,0,
0.23847102093606,0.0660920701640934,0,
0.235470050925551,0.0594131436423892,0,
0.232458976638913,0.0560787325196021,0,
0.230958491633659,0.0527392692587502,0,
0.227947417347021,0.0494048581359631,0,
0.224936343060383,0.046070447013176,0,
0.221925268773744,0.0427360358903885,0,
0.218914194487106,0.0394016247676014,0,
0.215903120200468,0.0360672136448143,0,
0.212881941637701,0.0360773179209439,0,
0.209870867351063,0.0327429067981568,0,
0.205339099506911,0.0327580632123511,0,
0.200807331662759,0.032773219626546,0,
0.197786153099991,0.0327833239026755,0,
0.203828510225527,0.0327631153504159,0,
0.208360278069679,0.0327479589362216,0
    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 111);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void drawFrontWheelInsideCircle5()
{
    float FrontWheel1[] = {
0.443476679330692,0.209219141540699,0,
0.380163285102255,0.165952631153504,0,
0.380153180826125,0.16929714655242,0,
0.380143076549996,0.172641661951337,0,
0.380132972273866,0.175986177350254,0,
0.380122867997736,0.179330692749171,0,
0.380102659445477,0.186019723547004,0,
0.380092555169347,0.189364238945921,0,
0.378561757335704,0.19605832188182,0,
0.378551653059574,0.199402837280737,0,
0.378531444507315,0.20609186807857,0,
0.378521340231185,0.209436383477487,0,
0.378501131678926,0.216125414275321,0,
0.378480923126667,0.222814445073154,0,
0.378470818850537,0.226158960472071,0,
0.378450610298278,0.232847991269905,0,
0.378430401746018,0.239537022067738,0,
0.378410193193759,0.246226052865572,0,
0.379900573922884,0.252910031525341,0,
0.379890469646754,0.256254546924258,0,
0.379860156818365,0.266288093121008,0,
0.38135053754749,0.272972071780777,0,
0.382840918276614,0.279656050440546,0,
0.382820709724355,0.286345081238379,0,
0.38431109045348,0.293029059898148,0,
0.385811575458734,0.296368523159001,0,
0.385801471182604,0.299713038557917,0,
0.387301956187858,0.303052501818769,0,
0.388792336916983,0.309736480478538,0,
0.388782232640853,0.313080995877454,0,
0.390272613369978,0.319764974537223,0,
0.391762994099102,0.326448953196992,0,
0.393263479104357,0.329788416457844,0,
0.394763964109611,0.333127879718696,0,
0.396254344838735,0.339811858378465,0,
0.397754829843989,0.343151321639317,0,
0.399255314849244,0.346490784900169,0,
0.400755799854498,0.349830248161021,0,
0.402256284859752,0.353169711421873,0,
0.403756769865006,0.356509174682725,0,
0.405257254870261,0.359848637943577,0,
0.406757739875515,0.363188101204429,0,
0.409768814162153,0.366522512327216,0,
0.411269299167407,0.369861975588068,0,
0.412779888448791,0.369856923450003,0,
0.414280373454045,0.373196386710855,0,
0.415790962735429,0.373191334572791,0,
0.417291447740683,0.376530797833643,0,
0.418802037022067,0.376525745695578,0,
0.420302522027322,0.37986520895643,0,
0.423323700590089,0.3798551046803,0,
0.424824185595343,0.383194567941152,0,
0.426334774876727,0.383189515803087,0,
0.429355953439495,0.383179411526957,0,
0.430856438444749,0.386518874787809,0,
0.433877617007517,0.38650877051168,0,
0.438409384851669,0.386493614097485,0,
0.436898795570285,0.38649866623555,0,
0.441430563414437,0.386483509821356,0,
0.44294115269582,0.386478457683291,0,
0.445962331258588,0.386468353407161,0,
0.448983509821356,0.386458249131032,0,
0.452004688384124,0.386448144854902,0,
0.455025866946891,0.386438040578772,0,
0.458057149785789,0.383083420903726,0,
0.459577843343302,0.379733853366744,0,
0.461088432624686,0.379728801228679,0,
0.464119715463584,0.376374181553633,0,
0.467150998302481,0.373019561878586,0,
0.470172176865249,0.373009457602457,0,
0.473203459704146,0.36965483792741,0,
0.47472415326166,0.366305270390429,0,
0.477765540376687,0.359606135316465,0,
0.480796823215584,0.356251515641419,0,
0.482317516773098,0.352901948104437,0,
0.486869493169509,0.346197760892409,0,
0.485348799611995,0.349547328429391,0,
0.488390186727022,0.342848193355427,0,
0.489920984560666,0.336154110419529,0,
0.492952267399563,0.332799490744482,0,
0.492972475951822,0.326110459946649,0,
0.494503273785466,0.31941637701075,0,
0.497534556624363,0.316061757335704,0,
0.497544660900493,0.312717241936787,0,
0.499075458734136,0.306023159000888,0,
0.500606256567779,0.29932907606499,0,
0.502147158677552,0.289290477730175,0,
0.500626465120038,0.292640045267156,0,
0.503677956511195,0.282596394794276,0,
0.503698165063455,0.275907363996443,0,
0.505228962897098,0.269213281060544,0,
0.505249171449357,0.262524250262711,0,
0.505279484277746,0.25249070406596,0,
0.506810282111389,0.245796621130062,0,
0.506779969283,0.255830167326812,0,
0.506830490663648,0.239107590332228,0,
0.508361288497292,0.232413507396329,0,
0.508391601325681,0.222379961199579,0,
0.50840170560181,0.219035445800662,0,
0.50841180987794,0.215690930401745,0,
0.508371392773421,0.229068991997412,0,
0.508432018430199,0.209001899603912,0,
0.508452226982459,0.202312868806078,0,
0.506961846253334,0.195628890146309,0,
0.506971950529464,0.192284374747393,0,
0.506982054805593,0.188939859348476,0,
0.506992159081723,0.185595343949559,0,
0.507012367633982,0.178906313151725,0,
0.507032576186242,0.172217282353891,0,
0.511574448306523,0.16885761054078,0,
0.508563374019885,0.165523199417993,0,
0.513105246140166,0.162163527604882,0,
0.516146633255193,0.155464392530919,0,
0.516156737531323,0.152119877132002,0,
0.513145663244685,0.148785466009214,0,
0.510124484681917,0.148795570285344,0,
0.507103306119149,0.148805674561474,0,
0.505602821113895,0.145466211300622,0,
0.505623029666154,0.138777180502788,0,
0.50413264893703,0.132093201843019,0,
0.498171126020531,0.105357287203944,0,
0.496670641015277,0.102017823943092,0,
0.492179290275644,0.0886549187616196,0,
0.49067880527039,0.0853154555007678,0,
0.487677835259881,0.0786365289790635,0,
0.486177350254627,0.0752970657182117,0,
0.502642268207905,0.12540922318325,0,
0.501151887478781,0.118725244523482,0,
0.499661506749656,0.112041265863713,0,
0.495170156010023,0.0986783606822405,0,
0.493679775280898,0.091994382022472,0,
0.484676865249373,0.0719576024573602,0,
0.483176380244119,0.0686181391965079,0,
0.481675895238865,0.065278675935656,0,
0.48017541023361,0.0619392126748037,0,
0.478664820952226,0.0619442648128685,0,
0.477164335946972,0.0586048015520166,0,
0.475663850941718,0.0552653382911643,0,
0.474153261660334,0.0552703904292291,0,
0.471142187373696,0.0519359793064424,0,
0.469641702368442,0.0485965160455905,0,
0.468131113087058,0.0486015681836553,0,
0.466630628081804,0.0452621049228034,0,
0.46512003880042,0.0452671570608682,0,
0.462098860237652,0.0452772613369978,0,
0.460598375232398,0.0419377980761455,0,
0.459087785951014,0.0419428502142102,0,
0.456066607388246,0.0419529544903398,0,
0.453055533101608,0.0386185433675532,0,
0.45003435453884,0.0386286476436827,0,
0.447023280252202,0.0352942365208952,0,
0.442491512408051,0.0353093929350896,0,
0.439470333845283,0.0353194972112196,0,
0.436439051006385,0.0386741168862663,0,
0.434928461725002,0.0386791690243311,0,
0.43039669388085,0.0386943254385254,0,
0.427375515318082,0.038704429714655,0,
0.431907283162234,0.0386892733004606,0,
0.424354336755314,0.0387145339907846,0,
0.419822568911163,0.0387296904049794,0,
0.421333158192547,0.0387246382669146,0,
0.416801390348395,0.038739794681109,0,
0.413780211785627,0.0387498989572385,0,
0.410759033222859,0.0387600032333681,0,
0.407737854660092,0.0387701075094981,0,
0.406217161102578,0.0421196750464796,0,
0.40319598253981,0.0421297793226091,0,
0.401675288982297,0.0454793468595911,0,
0.398654110419529,0.0454894511357206,0,
0.397133416862016,0.0488390186727021,0,
0.394102134023118,0.0521936383477483,0,
0.391070851184221,0.055548258022795,0,
0.388039568345323,0.0589028776978417,0,
0.386528979063939,0.0589079298359065,0,
0.385008285506426,0.0622574973728879,0,
0.383487591948912,0.0656070649098699,0,
0.380456309110015,0.0689616845849161,0,
0.378935615552501,0.072311252121898,0,
0.377414921994988,0.075660819658879,0,
0.375894228437474,0.0790103871958614,0,
0.374373534879961,0.0823599547328428,0,
0.372852841322447,0.0857095222698247,0,
0.371332147764934,0.0890590898068062,0,
0.36981145420742,0.0924086573437881,0,
0.368290760649906,0.0957582248807695,0,
0.366770067092393,0.099107792417751,0,
0.36523926925875,0.105801875353649,0,
0.363718575701236,0.109151442890631,0,
0.362197882143723,0.112501010427612,0,
0.362187777867593,0.115845525826529,0,
0.36066708431008,0.119195093363511,0,
0.359136286476436,0.125889176299409,0,
0.357605488642793,0.132583259235308,0,
0.357595384366663,0.135927774634225,0,
0.357575175814404,0.142616805432059,0,
0.357565071538275,0.145961320830975,0,
0.357554967262145,0.149305836229892,0,
0.357534758709886,0.155994867027726,0,
0.357514550157626,0.16268389782556,0,
0.360535728720394,0.16267379354943,0,
0.365067496564546,0.162658637135235,0,
0.368088675127313,0.162648532859106,0,
0.369599264408697,0.162643480721041,0,
0.371109853690081,0.162638428582976,0,
0.372620442971465,0.162633376444911,0,
0.374131032252849,0.162628324306846,0,
0.375641621534233,0.162623272168782,0,
0.377152210815617,0.162618220030716,0,
0.378662800097001,0.162613167892652,0,
0.380173389378384,0.162608115754587,0
    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 210);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}

void drawFrontWheelInsideCircle6()
{
    float FrontWheel1[] = {
  0.516156737531323,0.152119877132002,0,
0.51917791609409,0.152109772855872,0,
0.522199094656858,0.152099668579742,0,
0.525230377495756,0.148745048904696,0,
0.526761175329399,0.142050965968798,0,
0.528291973163042,0.135356883032899,0,
0.528322285991431,0.125323336836148,0,
0.529853083825074,0.11862925390025,0,
0.532894470940101,0.111930118826287,0,
0.534425268773745,0.105236035890388,0,
0.535956066607388,0.0985419529544899,0,
0.537486864441031,0.0918478700185918,0,
0.539017662274674,0.0851537870826932,0,
0.540538355832188,0.0818042195457113,0,
0.543569638671085,0.0784495998706651,0,
0.545090332228599,0.0751000323336832,0,
0.546611025786112,0.0717504647967022,0,
0.548131719343626,0.0684008972597203,0,
0.549652412901139,0.0650513297227388,0,
0.551173106458653,0.0617017621857569,0,
0.55420438929755,0.0583471425107102,0,
0.557245776412577,0.0516480074367469,0,
0.560277059251475,0.0482933877617006,0,
0.563308342090372,0.0449387680866544,0,
0.56633962492927,0.0415841484116077,0,
0.569370907768167,0.038229528736561,0,
0.575423369169832,0.0348648047853847,0,
0.572402190607065,0.0348749090615143,0,
0.579955137013984,0.0348496483711904,0,
0.582976315576752,0.0348395440950608,0,
0.585997494139519,0.0348294398189308,0,
0.589018672702287,0.0348193355428012,0,
0.592039851265055,0.0348092312666716,0,
0.596571619109207,0.0347940748524773,0,
0.593550440546439,0.0348041791286068,0,
0.599592797671974,0.0347839705763473,0,
0.602613976234742,0.0347738663002177,0,
0.60563515479751,0.0347637620240881,0,
0.608646229084148,0.0380981731468756,0,
0.611667407646916,0.0380880688707461,0,
0.614678481933554,0.0414224799935332,0,
0.617689556220192,0.0447568911163203,0,
0.62070063050683,0.0480913022391074,0,
0.622201115512084,0.0514307654999592,0,
0.623701600517339,0.0547702287608111,0,
0.625212189798723,0.0547651766227463,0,
0.626712674803976,0.0581046398835987,0,
0.628213159809231,0.0614441031444505,0,
0.631224234095869,0.0647785142672376,0,
0.634225204106377,0.0714574407889419,0,
0.635725689111631,0.0747969040497933,0,
0.63873676339827,0.0781313151725808,0,
0.640227144127394,0.0848152938323498,0,
0.641727629132649,0.0881547570932017,0,
0.643228114137903,0.091494220354054,0,
0.644728599143157,0.0948336836149059,0,
0.646218979872281,0.101517662274674,0,
0.647719464877536,0.104857125535525,0,
0.647709360601406,0.108201640934443,0,
0.64920984560666,0.111541104195294,0,
0.650710330611915,0.114880567456147,0,
0.650700226335785,0.118225082855063,0,
0.653691092070164,0.128248524775684,0,
0.653680987794034,0.131593040174601,0,
0.653680987794034,0.131593040174601,0,
0.652200711341039,0.121564546115916,0,
0.652190607064909,0.124909061514832,0,
0.653670883517904,0.134937555573518,0,
0.655171368523158,0.13827701883437,0,
0.655161264247029,0.141621534233287,0,
0.655151159970899,0.144966049632204,0,
0.655141055694769,0.14831056503112,0,
0.656631436423894,0.154994543690889,0,
0.590286759356559,0.11508265297874,0
    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 74);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}

void drawFrontWheelInsideCircle7()
{
    float FrontWheel1[] = {
0.774629173066041,0.0977437151402469,0,
0.779201358014711,0.0843504971303854,0,
0.780722051572225,0.0810009295934035,0,
0.782242745129738,0.077651362056422,0,
0.783763438687252,0.0743017945194401,0,
0.785284132244765,0.0709522269824591,0,
0.786804825802279,0.0676026594454772,0,
0.788325519359793,0.0642530919084958,0,
0.789846212917306,0.0609035243715134,0,
0.79136690647482,0.057553956834532,0,
0.814076267076226,0.0407555977689755,0,
0.818618139196508,0.0373959259558644,0,
0.824660496322043,0.0373757174036049,0,
0.821639317759275,0.0373858216797349,0,
0.817107549915124,0.0374009780939292,0,
0.812575782070972,0.0374161345081236,0,
0.81559696063374,0.037406030231994,0,
0.827681674884811,0.0373656131274753,0,
0.830702853447579,0.0373555088513457,0,
0.833724032010347,0.0373454045752161,0,
0.836745210573114,0.0373353002990866,0,
0.841276978417266,0.0373201438848918,0,
0.839766389135882,0.0373251960229565,0,
0.844298156980034,0.0373100396087622,0,
0.845808746261418,0.0373049874706974,0,
0.848829924824185,0.0372948831945678,0,
0.851851103386953,0.0372847789184382,0,
0.854872281949721,0.0372746746423082,0,
0.856372766954975,0.0406141379031601,0,
0.859383841241613,0.0439485490259476,0,
0.860894430522997,0.0439434968878829,0,
0.863905504809635,0.04727790801067,0,
0.865416094091019,0.0472728558726052,0,
0.868427168377657,0.0506072669953923,0,
0.871438242664295,0.0539416781181789,0,
0.872938727669549,0.0572811413790312,0,
0.875939697680058,0.0639600679007355,0,
0.877450286961442,0.0639550157626707,0,
0.88046136124808,0.0672894268854578,0,
0.886473405545226,0.0773027645299486,0,
0.887973890550481,0.0806422277908005,0,
0.893985934847627,0.0906555654352923,0,
0.895486419852881,0.0939950286961441,0,
0.883472435534718,0.0706238380082453,0,
0.875949801956187,0.0606155525018183,0,
0.884972920539972,0.0739633012690967,0,
0.889474375555735,0.0839816910516528,0,
0.890974860560989,0.0873211543125047,0,
0.893975830571497,0.0940000808342089,0,
0.895476315576752,0.0973395440950608,0,
0.895466211300622,0.100684059493977,0,
0.896966696305876,0.104023522754829,0,
0.89846718131113,0.107362986015681,0,
0.899967666316385,0.110702449276533,0,
0.901468151321639,0.114041912537385,0,
0.901458047045509,0.117386427936302,0,
0.902948427774634,0.12407040659607,0,
0.904438808503758,0.130754385255839,0,
0.904428704227629,0.134098900654756,0,
0.904428704227629,0.134098900654756,0,
0.905919084956753,0.140782879314525,0,
0.905898876404494,0.147471910112359,0,
0.907399361409748,0.150811373373211,0,
0.908829116482095,0.17756244442648,0,
0.907379152857489,0.157500404171044,0,
0.908869533586613,0.164184382830813,0,
0.908859429310484,0.16752889822973,0,
0.908849325034354,0.170873413628647,0,
0.908808907929836,0.184251475224314,0,
0.908788699377576,0.190940506022148,0,
0.908748282273058,0.204318567617815,0,
0.908728073720798,0.211007598415649,0,
0.908707865168539,0.217696629213482,0,
0.90868765661628,0.224385660011316,0,
0.908647239511761,0.237763721606983,0,
0.908627030959502,0.244452752404817,0,
0.908768490825317,0.197629536819982,0,
0.90866744806402,0.23107469080915,0,
0.908616926683372,0.247797267803734,0,
0.908596718131113,0.254486298601567,0,
0.908586613854983,0.257830814000484,0,
0.90705581602134,0.264524896936383,0,
0.905535122463826,0.267874464473364,0,
0.905514913911567,0.274563495271198,0,
0.903984116077924,0.281257578207097,0,
0.90246342252041,0.284607145744078,0,
0.902443213968151,0.291296176541912,0,
0.900912416134508,0.29799025947781,0,
0.899381618300864,0.304684342413709,0,
0.897850820467221,0.311378425349607,0,
0.896330126909708,0.314727992886589,0,
0.894809433352194,0.318077560423571,0,
0.894799329076065,0.321422075822487,0,
0.893278635518551,0.324771643359469,0,
0.891747837684908,0.331465726295367,0,
0.890227144127394,0.334815293832349,0,
0.888706450569881,0.338164861369331,0,
0.887185757012367,0.341514428906313,0,
0.885665063454854,0.344863996443294,0,
0.88414436989734,0.348213563980276,0,
0.882623676339827,0.351563131517257,0,
0.881102982782313,0.354912699054239,0,
0.8795822892248,0.358262266591221,0,
0.878061595667286,0.361611834128202,0,
0.876551006385902,0.361616886266267,0,
0.875030312828389,0.364966453803249,0,
0.871988925713362,0.371665588877212,0,
0.870478336431978,0.371670641015277,0,
0.868957642874464,0.375020208552259,0,
0.865926360035566,0.378374828227305,0,
0.864415770754183,0.37837988036537,0,
0.85533202651362,0.385099223991592,0,
0.858363309352518,0.381744604316546,0,
0.861394592191415,0.3783899846415,0,
0.853821437232236,0.385104276129657,0,
0.850790154393339,0.388458895804704,0,
0.847768975830571,0.388469000080833,0,
0.846258386549187,0.388474052218898,0,
0.844747797267803,0.388479104356963,0,
0.841726618705036,0.388489208633093,0,
0.840216029423652,0.388494260771158,0,
0.838705440142268,0.388499312909222,0,
0.8356842615795,0.388509417185352,0,
0.834173672298116,0.388514469323417,0,
0.832663083016732,0.388519521461482,0,
0.829652008730094,0.385185110338694,0,
0.826630830167326,0.385195214614824,0,
0.823619755880688,0.381860803492037,0,
0.822119270875434,0.378521340231185,0,
0.819098092312666,0.378531444507315,0,
0.817597607307412,0.375191981246463,0,
0.814586533020774,0.371857570123676,0,
0.81308604801552,0.368518106862824,0,
0.807074003718373,0.358504769218332,0,
0.811585563010266,0.365178643601972,0,
0.810074973728882,0.365183695740036,0,
0.805573518713119,0.355165305957481,0,
0.80257254870261,0.348486379435776,0,
0.804073033707865,0.351825842696629,0,
0.801072063697356,0.345146916174924,0,
0.799571578692102,0.341807452914073,0,
0.798071093686848,0.338467989653221,0,
0.795070123676339,0.331789063131517,0,
0.793579742947215,0.325105084471748,0,
0.79208936221809,0.318421105811979,0,
0.790588877212836,0.315081642551127,0,
0.790598981488966,0.31173712715221,0,
0.789108600759841,0.305053148492441,0,
0.787608115754587,0.301713685231589,0,
0.786107630749333,0.298374221970737,0,
0.786127839301592,0.291685191172904,0,
0.784637458572467,0.285001212513135,0,
0.772906393985934,0.167983590655565,0,
0.774406878991188,0.171323053916416,0,
0.775897259720313,0.178007032576185,0,
0.778898229730822,0.184685959097889,0,
0.778867916902433,0.19471950529464,0,
0.778837604074044,0.20475305149139,0,
0.778878021178562,0.191374989895723,0,
0.778847708350173,0.201408536092474,0,
0.778817395521784,0.211442082289224,0,
0.778797186969525,0.218131113087058,0,
0.778766874141136,0.228164659283808,0,
0.778746665588877,0.234853690081642,0,
0.778726457036617,0.241542720879475,0,
0.778716352760488,0.244887236278392,0,
0.778716352760488,0.244887236278392,0,
0.778686039932099,0.254920782475143,0,
0.780206733489612,0.251571214938161,0,
0.780186524937353,0.258260245735995,0,
0.780166316385094,0.264949276533828,0,
0.781666801390348,0.26828873979468,0,
0.783157182119472,0.274972718454449,0,
0.783147077843343,0.278317233853366,0,
0.846814121736318,0.204525705278473,0,
0.792887600032333,0.0542043892975501,0,
0.794408293589847,0.0508548217605686,0,
0.797439576428744,0.0475002020855224,0,
0.800470859267642,0.0441455824104761,0,
0.803492037830409,0.0441354781343465,0,
0.806523320669307,0.0407808584592994,0,
0.809544499232075,0.0407707541831698,0,
0.774629173066041,0.0977437151402469,0,

    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 183);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void drawFrontWheelInsideCircle8()
{
    float FrontWheel1[] = {
0.0628688060787325,0.190425187939535,0,
0.0628890146309918,0.183736157141702,0,
0.0629092231832511,0.177047126343868,0,
0.0629193274593808,0.173702610944951,0,
0.064450125293024,0.167008528009053,0,
0.0659708188505375,0.163658960472071,0,
0.0675016166841807,0.156964877536173,0,
0.0690122059655646,0.156959825398108,0,
0.0705328995230781,0.153610257861126,0,
0.0720535930805916,0.150260690324145,0,
0.0750848759194891,0.146906070649098,0,
0.0781161587583865,0.143551450974052,0,
0.0811373373211542,0.143541346697922,0,
0.0826479266025381,0.143536294559857,0,
0.084158515883922,0.143531242421793,0,
0.0856691051653059,0.143526190283728,0,
0.0886902837280737,0.143516086007598,0,
0.0917114622908414,0.143505981731468,0,
0.0932220515722253,0.143500929593404,0,
0.0962432301349931,0.143490825317274,0,
0.0992644086977608,0.143480721041144,0,
0.100774997979144,0.14347566890308,0,
0.102285587260528,0.143470616765015,0,
0.103796176541912,0.14346556462695,0,
0.105306765823296,0.143460512488885,0,
0.108327944386064,0.143450408212755,0,
0.111349122948831,0.143440303936626,0,
0.114370301511599,0.143430199660496,0,
0.117391480074367,0.143420095384366,0,
0.118902069355751,0.143415043246302,0,
0.120412658637135,0.143409991108237,0,
0.123433837199902,0.143399886832107,0,
0.124944426481286,0.143394834694042,0,
0.127965605044054,0.143384730417913,0,
0.129476194325438,0.143379678279848,0,
0.132497372888206,0.143369574003718,0,
0.0643793953601163,0.190420135801471,0,
0.0659101931937595,0.183726052865572,0,
0.068941476032657,0.180371433190526,0,
0.0704722738663002,0.173677350254627,0,
0.0735035567051976,0.170322730579581,0,
0.0750242502627112,0.166973163042599,0,
0.0780555331016085,0.163618543367553,0,
0.0810767116643763,0.163608439091423,0,
0.084097890227144,0.163598334815294,0,
0.0871190687899118,0.163588230539164,0,
0.0901402473526796,0.163578126263034,0,
0.0931614259154474,0.163568021986904,0,
0.0961826044782152,0.163557917710775,0,
0.0992037830409829,0.163547813434645,0,
0.10222496160375,0.163537709158516,0,
0.105246140166518,0.163527604882386,0,
0.108267318729286,0.163517500606256,0,
0.111288497292053,0.163507396330127,0,
0.114309675854821,0.163497292053997,0,
0.117330854417589,0.163487187777867,0,
0.120352032980357,0.163477083501738,0,
0.123373211543124,0.163466979225608,0,
0.126394390105892,0.163456874949478,0,
0.12941556866866,0.163446770673349,0,
0.132436747231428,0.163436666397219,0,
0.135457925794196,0.163426562121089,0,
0.138479104356963,0.163416457844959,0,
0.141500282919731,0.16340635356883,0,
0.144521461482499,0.1633962492927,0,
0.147542640045267,0.163386145016571,0,
0.150563818608034,0.163376040740441,0,
0.153584997170802,0.163365936464311,0,
0.15660617573357,0.163355832188182,0,
0.161137943577722,0.163340675773987,0,
0.162648532859105,0.163335623635922,0,
0.167180300703257,0.163320467221728,0,
0.170201479266025,0.163310362945598,0,
0.171712068547409,0.163305310807533,0,
0.174733247110177,0.163295206531404,0,
0.17624383639156,0.163290154393339,0,
0.177754425672944,0.163285102255274,0,
0.179265014954328,0.163280050117209,0,
0.182286193517096,0.16326994584108,0,
0.18379678279848,0.163264893703015,0,
0.186817961361248,0.163254789426885,0,
0.188328550642631,0.16324973728882,0,
0.189839139924015,0.163244685150755,0,
0.192860318486783,0.163234580874626,0,
0.195881497049551,0.163224476598496,0,
0.198902675612319,0.163214372322367,0,
0.20343444345647,0.163199215908172,0,
0.201923854175086,0.163204268046237,0,
0.207966211300622,0.163184059493977,0,
0.206455622019238,0.163189111632042,0,
0.21098738986339,0.163173955217848,0,
0.214008568426158,0.163163850941718,0,
0.218540336270309,0.163148694527524,0,
0.217029746988925,0.163153746665588,0,
0.220050925551693,0.163143642389459,0,
0.223072104114461,0.163133538113329,0,
0.224582693395845,0.163128485975264,0,
0.227603871958612,0.163118381699135,0,
0.232135639802764,0.16310322528494,0,
0.235156818365532,0.16309312100881,0,
0.2381779969283,0.163083016732681,0,
0.242709764772451,0.163067860318486,0,
0.247241532616603,0.163052703904292,0,
0.229114461239996,0.16311332956107,0,
0.250262711179371,0.163042599628162,0,
0.253283889742138,0.163032495352033,0,
0.256305068304906,0.163022391075903,0,
0.259326246867674,0.163012286799773,0,
0.262347425430442,0.163002182523644,0,
0.265368603993209,0.162992078247514,0,
0.271410961118745,0.162971869695255,0,
0.268389782555977,0.162981973971384,0,
0.274432139681513,0.162961765419125,0,
0.277453318244281,0.162951661142995,0,
0.281985086088432,0.162936504728801,0,
0.278963907525664,0.162946609004931,0,
0.286516853932584,0.162921348314606,0,
0.2850062646512,0.162926400452671,0,
0.289538032495351,0.162911244038477,0,
0.292559211058119,0.162901139762347,0,
0.295580389620887,0.162891035486218,0,
0.300112157465039,0.162875879072023,0,
0.303133336027806,0.162865774795893,0,
0.297090978902271,0.162885983348152,0,
0.30464392530919,0.162860722657828,0,
0.307665103871958,0.162850618381699,0,
0.310686282434726,0.162840514105569,0,
0.313707460997494,0.162830409829439,0,
0.316728639560261,0.16282030555331,0,
0.319749818123029,0.16281020127718,0,
0.322770996685797,0.162800097001051,0,
0.325792175248565,0.162789992724921,0,
0.328813353811332,0.162779888448791,0,
0.3318345323741,0.162769784172661,0,
0.334855710936868,0.162759679896532,0,
0.337876889499636,0.162749575620402,0,
0.340898068062403,0.162739471344273,0,
0.346940425187939,0.162719262792013,0,
0.343919246625171,0.162729367068143,0,
0.349961603750707,0.162709158515883,0,
0.352982782313475,0.162699054239754,0,
0.354493371594858,0.162694002101689,0,
0.357514550157626,0.16268389782556,0,
0.360535728720394,0.16267379354943,0,
0.363556907283162,0.1626636892733,0,
0.36657808584593,0.16265358499717,0,
0.371109853690081,0.162638428582976,0,
0.374131032252849,0.162628324306846,0,
0.377152210815617,0.162618220030716,0,
0.380173389378384,0.162608115754587,0,
0.368088675127313,0.162648532859106,0,
0.356054482256891,0.14596637296904,0,
0.362096839382426,0.145946164416781,0,
0.360586250101042,0.145951216554845,0,
0.357565071538275,0.145961320830975,0,
0.365118017945194,0.145936060140651,0,
0.368139196507962,0.145925955864521,0,
0.372670964352113,0.145910799450327,0,
0.371160375070729,0.145915851588392,0,
0.374181553633497,0.145905747312262,0,
0.377202732196265,0.145895643036132,0,
0.378713321477649,0.145890590898067,0,
0.380223910759033,0.145885538760003,0,
0.383245089321801,0.145875434483873,0,
0.381704187212028,0.155914032818688,0,
0.383234985045671,0.14921994988279,0,
0.353033303694123,0.14597647724517,0,
0.350012125131355,0.145986581521299,0,
0.346990946568587,0.145996685797429,0,
0.34396976800582,0.146006790073559,0,
0.340948589443052,0.146016894349688,0,
0.339438000161668,0.146021946487753,0,
0.3364168215989,0.146032050763883,0,
0.334906232317516,0.146037102901948,0,
0.333395643036132,0.146042155040012,0,
0.331885053754748,0.146047207178077,0,
0.330374464473365,0.146052259316142,0,
0.328863875191981,0.146057311454207,0,
0.327353285910597,0.146062363592272,0,
0.325842696629213,0.146067415730337,0,
0.322821518066445,0.146077520006466,0,
0.321310928785061,0.146082572144531,0,
0.319800339503678,0.146087624282596,0,
0.318289750222294,0.146092676420661,0,
0.315268571659526,0.14610278069679,0,
0.313757982378142,0.146107832834855,0,
0.312247393096758,0.14611288497292,0,
0.310736803815374,0.146117937110985,0,
0.307715625252606,0.146128041387115,0,
0.306205035971223,0.146133093525179,0,
0.303183857408455,0.146143197801309,0,
0.301673268127071,0.146148249939374,0,
0.298652089564303,0.146158354215503,0,
0.297141500282919,0.146163406353568,0,
0.295630911001535,0.146168458491633,0,
0.292609732438768,0.146178562767763,0,
0.289588553876,0.146188667043893,0,
0.286567375313232,0.146198771320022,0,
0.283546196750464,0.146208875596152,0,
0.28203560746908,0.146213927734216,0,
0.280525018187697,0.146218979872282,0,
0.277503839624929,0.146229084148411,0,
0.274482661062161,0.146239188424541,0,
0.271461482499393,0.14624929270067,0,
0.268440303936626,0.1462593969768,0,
0.265419125373858,0.14626950125293,0,
0.26239794681109,0.14627960552906,0,
0.259376768248322,0.146289709805189,0,
0.138549834289871,0.140004850052541,0,
0.14610278069679,0.139979589362218,0,
0.155166316385094,0.139949276533828,0,
0.161208673510629,0.139929067981569,0,
0.167251030636165,0.13990885942931,0,
0.171782798480316,0.139893703015115,0,
0.177835259881982,0.136528979063939,0,
0.183877617007517,0.13650877051168,0,
0.189919974133053,0.136488561959421,0,
0.197483024816102,0.13311878587018,0,
0.202014792660253,0.133103629455985,0,
0.209567739067173,0.133078368765661,0,
0.22014186403686,0.133043003799207,0,
0.224653423328752,0.139716878182846,0,
0.235227548298439,0.139681513216392,0,
0.238248726861207,0.139671408940263,0,
0.244291083986743,0.139651200388004,0,
0.250333441112278,0.139630991835744,0,
0.253354619675046,0.139620887559615,0,
0.256365693961684,0.142955298682402,0
    };
    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 228);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void carBody()
{
    float FrontWheel1[] = {
0.0644299167407647,0.173697558806886,0,
0.061348112521219,0.193774755476517,0,
0.0612672783121817,0.220530878667852,0,
0.0611965483792741,0.243942486460269,0,
0.0611157141702368,0.270698609651604,0,
0.0610348799611996,0.297454732842939,0,
0.0609439414760327,0.32755537143319,0,
0.0608530029908657,0.357656010023442,0,
0.0653039366259801,0.384396976800581,0,
0.0697649745372241,0.407793428178804,0,
0.0757467060059816,0.427840312020046,0,
0.0817385417508689,0.444542680462371,0,
0.0877505860480155,0.454556018106862,0,
0.095273219626546,0.464564303613288,0,
0.102795853205076,0.474572589119715,0,
0.11182907606499,0.484575822488076,0,
0.119351709643521,0.494584107994503,0,
0.129895521784819,0.504582289224799,0,
0.138938848920863,0.511241007194244,0,
0.14950286961442,0.514550157626707,0,
0.15703560746908,0.521213927734216,0,
0.166089038881254,0.524528130304744,0,
0.173631881012044,0.527847385013337,0,
0.182695416700347,0.527817072184948,0,
0.190228154555007,0.534480842292458,0,
0.199281585967181,0.537795044862986,0,
0.205323943092716,0.537774836310726,0,
0.21436727022876,0.544433554280171,0,
0.22192021663568,0.544408293589846,0,
0.230963543771724,0.551067011559291,0,
0.238506385902513,0.554386266267884,0,
0.247559817314687,0.557700468838412,0,
0.258093525179856,0.571043165467625,0,
0.265616158758386,0.581051450974052,0,
0.2746493816183,0.591054684342413,0,
0.283672500202085,0.604402433109691,0,
0.294206208067254,0.617745129738905,0,
0.304739915932422,0.631087826368118,0,
0.313763034516207,0.644435575135397,0,
0.337851628809312,0.671110864117694,0,
0.369483065233206,0.701105407808584,0,
0.380026877374504,0.71110358903888,0,
0.393581763802441,0.724436181391964,0,
0.408647239511761,0.737763721606983,0,
0.422222334491957,0.744407283162233,0,
0.730402756446528,0.736687616199175,0,
0.803062606094899,0.686277382588311,0,
0.813667043892975,0.676208471425106,0,
0.824281585967181,0.662795044862985,0,
0.834896128041387,0.649381618300864,0,
0.894162759679896,0.532126545954247,0,
0.903256608196588,0.522062686929108,0,
0.913871150270794,0.508649260366987,0,
0.939652210815617,0.475118220030716,0,
0.947306199983833,0.441647805351224,0,
0.948907727750383,0.411542114622908,0,
0.948988561959421,0.384785991431573,0,
0.947558806887074,0.358034920378303,0,
0.95063050683049,0.34130223910759,0,
0.956733489612804,0.321214938161829,0,
0.958324913103225,0.29445376283243,0,
0.955394673025624,0.264363228518308,0,
0.955495715786921,0.23091807452914,0,
0.952535162880931,0.210861086411769,0,
0.911880607873252,0.1675187939536,0,
0.916341645784496,0.190915245331824,0,
0.917781505132972,0.214321800986177,0,
0.919231468757578,0.234383841241613,0,
0.916129455985773,0.261150068709077,0,
0.914548136771481,0.284566728639559,0,
0.911456228275806,0.307988440708107,0,
0.906863834774876,0.328070689515802,0,
0.900750747716433,0.351502505860479,0,
0.894667973486379,0.364900776008406,0,
0.885553916417427,0.381653665831379,0,
0.874939374343221,0.3950670923935,0,
0.859793064424864,0.408495675369816,0,
0.846187656616279,0.411885660011316,0,
0.837124120927976,0.411915972839705,0,
0.828070689515803,0.408601770269177,0,
0.817516773098375,0.401948104437797,0,
0.80849365451459,0.388600355670519,0,
0.799480640206935,0.371908091504324,0,
0.791958006628405,0.361899805997898,0,
0.785986379435777,0.338508406757739,0,
0.780004647967019,0.318461522916498,0,
0.775533505779646,0.298409586937191,0,
0.771052259316142,0.281702166356802,0,
0.768101810686282,0.258300662840514,0,
0.766661951337806,0.234894107186161,0,
0.768233166275968,0.214821962654595,0,
0.768303896208875,0.191410354862177,0,
0.769865006870907,0.174682725729528,0,
0.759321194729609,0.164684544499231,0,
0.745735995473284,0.161385498342898,0,
0.723087260528655,0.158116765014954,0,
0.522188990380729,0.155444183978659,0,
0.516146633255193,0.155464392530919,0,
0.513085037587907,0.168852558402715,0,
0.514535001212513,0.188914598658151,0,
0.515984964837119,0.208976638913588,0,
0.517414719909465,0.235727709966857,0,
0.517364198528817,0.252450286961441,0,
0.514292498585401,0.269182968232155,0,
0.514221768652493,0.292594576024573,0,
0.509639479427693,0.309332309433351,0,
0.505057190202893,0.32607004284213,0,
0.501985490259477,0.342802724112844,0,
0.495882507477164,0.362890025058604,0,
0.486778554684342,0.376298399482661,0,
0.479185191172904,0.389701721768652,0,
0.468570649098698,0.403115148330773,0,
0.457986419852881,0.406495028696143,0,
0.447392086330935,0.413219424460431,0,
0.436807857085118,0.416599304825802,0,
0.427754425672944,0.413285102255274,0,
0.417200509255516,0.406631436423894,0,
0.409677875676986,0.396623150917468,0,
0.402165346374585,0.383270350012124,0,
0.39315233206693,0.36657808584593,0,
0.385639802764529,0.353225284940586,0,
0.38266914558241,0.336512812222132,0,
0.378177794842777,0.323149907040659,0,
0.373716756931533,0.299753455662436,0,
0.370735995473284,0.286385498342898,0,
0.367775442567294,0.266328510225527,0,
0.366325478942688,0.246266469970091,0,
0.366396208875596,0.222854862177673,0,
0.366466938808503,0.199443254385255,0,
0.369558847304179,0.176021542316708,0,
0.369599264408697,0.162643480721041,0,
0.368139196507962,0.145925955864521,0,
0.354553997251636,0.142626909708188,0,
0.345490461563333,0.142657222536577,0,
0.3364168215989,0.146032050763883,0,
0.288077964594616,0.146193719181957,0,
0.236717929027564,0.146365491876161,0,
0.211037911244038,0.146451378223264,0,
0.147593161425915,0.146663568021987,0,
0.129455985773179,0.150068709077681,0,
0.0962230215827338,0.150179856115107,0,
0.0750848759194891,0.146906070649098,0,
0.0659708188505375,0.163658960472071,0,
0.0644299167407647, 0.173697558806886, 0
    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 144);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void frontGlass()
{
    float FrontWheel1[] = {
0.262716231509174,0.540927370463179,0,
0.264216716514428,0.544266833724031,0,
0.267227790801067,0.547601244846819,0,
0.270238865087705,0.550935655969605,0,
0.271739350092959,0.554275119230458,0,
0.274750424379597,0.557609530353245,0,
0.277761498666235,0.560943941476032,0,
0.280772572952873,0.564278352598819,0,
0.283783647239511,0.567612763721606,0,
0.285284132244766,0.570952226982458,0,
0.288295206531403,0.574286638105246,0,
0.289795691536658,0.577626101366097,0,
0.292806765823296,0.580960512488885,0,
0.29431735510468,0.58095546035082,0,
0.297328429391318,0.584289871473607,0,
0.300339503677956,0.587624282596394,0,
0.30183998868321,0.590963745857246,0,
0.304851062969848,0.594298156980033,0,
0.307862137256486,0.597632568102821,0,
0.310873211543124,0.600966979225608,0,
0.313884285829763,0.604301390348395,0,
0.316895360116401,0.607635801471182,0,
0.319906434403039,0.610970212593969,0,
0.322917508689677,0.614304623716756,0,
0.325928582976315,0.617639034839544,0,
0.328939657262953,0.620973445962331,0,
0.331950731549591,0.624307857085117,0,
0.334961805836229,0.627642268207905,0,
0.337972880122867,0.630976679330692,0,
0.340983954409506,0.634311090453479,0,
0.343995028696144,0.637645501576266,0,
0.347006102982782,0.640979912699053,0,
0.35001717726942,0.644314323821841,0,
0.353028251556058,0.647648734944628,0,
0.356039325842696,0.650983146067415,0,
0.359050400129334,0.654317557190202,0,
0.362061474415972,0.65765196831299,0,
0.36507254870261,0.660986379435776,0,
0.368073518713119,0.667665305957481,0,
0.371084592999757,0.670999717080268,0,
0.374095667286395,0.674334128203055,0,
0.377106741573033,0.677668539325842,0,
0.380117815859671,0.681002950448629,0,
0.38312889014631,0.684337361571416,0,
0.386139964432948,0.687671772694204,0,
0.389151038719586,0.691006183816991,0,
0.392162113006224,0.694340594939778,0,
0.395173187292862,0.697675006062565,0,
0.3981842615795,0.701009417185352,0,
0.402705925147522,0.704338776170074,0,
0.40571699943416,0.707673187292861,0,
0.410238663002182,0.711002546277584,0,
0.414760326570204,0.714331905262306,0,
0.561287486864441,0.713841847870018,0,
0.487783930159243,0.543519117290437,0,
0.265737410071942,0.54091726618705,0
    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 56);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void sideGlass()
{
    float FrontWheel1[] = {
0.514088594293104,0.536675288982297,0,
0.527119877132002,0.52332066930725,0,
0.571922237490906,0.693739390510063,0,
0.57342272249616,0.697078853770915,0,
0.576433796782798,0.700413264893702,0,
0.579444871069436,0.703747676016489,0,
0.583966534637458,0.707077035001212,0,
0.589998787486864,0.710401341847869,0,
0.594530555331016,0.710386185433675,0,
0.599062323175167,0.71037102901948,0,
0.728973001374181,0.709936545145905,0,
0.731994179936949,0.709926440869775,0,
0.806174723142834,0.65616663972193,0,
0.813747878102012,0.649452348233772,0,
0.82134124161345,0.63604902594778,0,
0.879056866866057,0.532177067334896,0,
0.514088594293104,0.536675288982297,0,

    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 17);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void front()
{
    float FrontWheel1[] = {
0.0638842858297631,0.354301390348395,0,
0.0772673995634952,0.42,0,
0.0832895481367714,0.42,0,
0.235818648452024,0.42,0,
0.364228841645784,0.42,0,
0.349375555735187,0.356691051653059,0,
0.225517338937838,0.353760811575458,0,
0.2225062646512,0.350426400452671,0,
0.210502384609166,0.323710694365855,0,
0.209001899603912,0.320371231105003,0,
0.205990825317274,0.317036819982216,0,
0.0851436828065637,0.317440991027402,0,
0.0805917064101527,0.32414517823943,0,
0.0759993129092231,0.344227427047126,0,
0.0729579257941961,0.350926562121089,0,
0.0638842858297631,0.354301390348395,0,




    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 16);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void frontWhite()
{
    float FrontWheel1[] = {
0.0823245897663891,0.250560787325195,0,
0.0821730256244442,0.300344555816021,0,
0.139565314040902,0.300344555816021,0,
0.196977811009619,0.300344555816021,0,
0.197119270875434,0.253521340231185,0,
0.194118300864925,0.246842413709481,0,
0.138226497453722,0.246842413709481,0,
0.0823245897663891,0.250560787325195,0,

    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 8);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void sideWhite()
{
    float FrontWheel1[] = {
0.83,0.411542114622908,0,
0.46,0.411542114622908,0,
0.46,0.39,0,
0.83,0.39,0,
0.83,0.411542114622908,0,

    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 5);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void sideLookingGlass()
{
    /*float FrontWheel1[] = {
0.522487066526554,0.556780979710613,0,
0.549677673591463,0.556690041225446,0,
0.545054967262145,0.586805836229892,0,
0.560080025866946,0.613511438040578,0,
0.602477568506992,0.579924824185595,0,
0.595066081965888,0.533126869291083,0,
0.554280171368523,0.533263277018834,0,
0.521047207178077,0.53337442405626,0
    };*/
    float FrontWheel1[] = {
0.549677673591463,0.556690041225446,0,
0.545054967262145,0.586805836229892,0,
0.560080025866946,0.613511438040578,0,
0.602477568506992,0.579924824185595,0,
0.595066081965888,0.533126869291083,0,
0.554280171368523,0.533263277018834,0,
0.549677673591463,0.556690041225446,0,

    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 8);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void sideLookingGlassHandle()
{
    float FrontWheel1[] = {
0.522487066526554,0.556780979710613,0,
0.549677673591463,0.556690041225446,0,
0.554280171368523,0.533263277018834,0,
0.521047207178077,0.53337442405626,0,
0.522487066526554,0.556780979710613,0,
    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 5);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void uppercarBody()
{
    /*float FrontWheel1[] = {
0.157532051282051,0.422619047619047,0,
0.170032051282051,0.458333333333333,0,
0.196314102564102,0.50595238095238,0,
0.235416666666666,0.529761904761904,0,
0.274358974358974,0.547619047619047,0,
0.305608974358974,0.56547619047619,0,
0.325961538461538,0.607142857142857,0,
0.343910256410256,0.63095238095238,0,
0.360096153846153,0.660714285714285,0,
0.376282051282051,0.69047619047619,0,
0.388301282051282,0.708333333333333,0,
0.406410256410256,0.738095238095238,0,
0.420352564102564,0.75595238095238,0,
0.438221153846153,0.776785714285714,0,
0.455608974358974,0.779761904761904,0,
0.486378205128205,0.779761904761904,0,
0.53157051282051,0.779761904761904,0,
0.62780448717948,0.782738095238095,0,
0.65945512820512,0.779761904761904,0,
0.70176282051281,0.779761904761904,0,
0.716746794871784,0.764880952380953,0,
0.739102564102564,0.738095238095238,0,
0.761538461538461,0.714285714285714,0,
0.781570512820512,0.672619047619047,0,
0.792467948717948,0.648809523809524,0,
0.813782051282051,0.583333333333333,0,
0.822916666666666,0.56547619047619,0,
0.831891025641025,0.541666666666666,0,
0.85176282051282,0.494047619047619,0,
0.866185897435897,0.458333333333333,0,
0.868910256410256,0.416666666666666,0,
0.730288461538461,0.482142857142857,0,
0.661057692307692,0.482142857142857,0,
0.431570512820512,0.458333333333333,0,
0.304647435897435,0.458333333333333,0,
0.231410256410256,0.452380952380952,0,

    };*/
    float FrontWheel1[] = {
0.0697649745372241,0.407793428178804,0,
0.0757467060059816,0.427840312020046,0,
0.0817385417508689,0.444542680462371,0,
0.0877505860480155,0.454556018106862,0,
0.095273219626546,0.464564303613288,0,
0.102795853205076,0.474572589119715,0,
0.11182907606499,0.484575822488076,0,
0.119351709643521,0.494584107994503,0,
0.129895521784819,0.504582289224799,0,
0.138938848920863,0.511241007194244,0,
0.14950286961442,0.514550157626707,0,
0.15703560746908,0.521213927734216,0,
0.166089038881254,0.524528130304744,0,
0.173631881012044,0.527847385013337,0,
0.182695416700347,0.527817072184948,0,
0.190228154555007,0.534480842292458,0,
0.199281585967181,0.537795044862986,0,
0.205323943092716,0.537774836310726,0,
0.21436727022876,0.544433554280171,0,
0.22192021663568,0.544408293589846,0,
0.230963543771724,0.551067011559291,0,
0.238506385902513,0.554386266267884,0,
0.247559817314687,0.557700468838412,0,
0.258093525179856,0.571043165467625,0,
0.265616158758386,0.581051450974052,0,
0.2746493816183,0.591054684342413,0,
0.283672500202085,0.604402433109691,0,
0.294206208067254,0.617745129738905,0,
0.304739915932422,0.631087826368118,0,
0.313763034516207,0.644435575135397,0,
0.337851628809312,0.671110864117694,0,
0.369483065233206,0.701105407808584,0,
0.380026877374504,0.71110358903888,0,
0.393581763802441,0.724436181391964,0,
0.408647239511761,0.737763721606983,0,
0.422222334491957,0.744407283162233,0,
0.730402756446528,0.736687616199175,0,
0.803062606094899,0.686277382588311,0,
0.813667043892975,0.676208471425106,0,
0.824281585967181,0.662795044862985,0,
0.834896128041387,0.649381618300864,0,
0.894162759679896,0.532126545954247,0,
0.903256608196588,0.522062686929108,0,
0.913871150270794,0.508649260366987,0,
0.939652210815617,0.475118220030716,0,
0.947306199983833,0.441647805351224,0,
0.948907727750383,0.411542114622908,0,
0.0697649745372241,0.407793428178804,0,

    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 54);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}
void drawWheelShadowBack()
{
    /*float FrontWheel1[] = {
0.157532051282051,0.422619047619047,0,
0.170032051282051,0.458333333333333,0,
0.196314102564102,0.50595238095238,0,
0.235416666666666,0.529761904761904,0,
0.274358974358974,0.547619047619047,0,
0.305608974358974,0.56547619047619,0,
0.325961538461538,0.607142857142857,0,
0.343910256410256,0.63095238095238,0,
0.360096153846153,0.660714285714285,0,
0.376282051282051,0.69047619047619,0,
0.388301282051282,0.708333333333333,0,
0.406410256410256,0.738095238095238,0,
0.420352564102564,0.75595238095238,0,
0.438221153846153,0.776785714285714,0,
0.455608974358974,0.779761904761904,0,
0.486378205128205,0.779761904761904,0,
0.53157051282051,0.779761904761904,0,
0.62780448717948,0.782738095238095,0,
0.65945512820512,0.779761904761904,0,
0.70176282051281,0.779761904761904,0,
0.716746794871784,0.764880952380953,0,
0.739102564102564,0.738095238095238,0,
0.761538461538461,0.714285714285714,0,
0.781570512820512,0.672619047619047,0,
0.792467948717948,0.648809523809524,0,
0.813782051282051,0.583333333333333,0,
0.822916666666666,0.56547619047619,0,
0.831891025641025,0.541666666666666,0,
0.85176282051282,0.494047619047619,0,
0.866185897435897,0.458333333333333,0,
0.868910256410256,0.416666666666666,0,
0.730288461538461,0.482142857142857,0,
0.661057692307692,0.482142857142857,0,
0.431570512820512,0.458333333333333,0,
0.304647435897435,0.458333333333333,0,
0.231410256410256,0.452380952380952,0,

    };*/
    float FrontWheel1[] = {
0.706354410616705,0.0619047619047616,0,
0.711334894613583,0.0428571428571427,0,
0.704699453551912,0.0666666666666664,0,
0.706354410616705,0.0619047619047616,0,
0.708024980483996,0.0523809523809521,0,
0.712989851678376,0.0380952380952379,0,
0.70967993754879,0.0476190476190474,0,
0.714644808743169,0.0333333333333332,0,
0.716299765807962,0.0285714285714284,0,
0.717954722872756,0.0238095238095237,0,
0.719609679937549,0.0190476190476189,0,
0.722919594067135,0.00952380952380949,0,
0.724574551131928,0.00476190476190474,0,
0.736112412177986,-0.0142857142857142,0,
0.742701014832162,-0.0238095238095237,0,
0.745979703356752,-0.0238095238095237,0,
0.767213114754098,0,0,
0.76391881342701,0.00476190476190474,0,
0.767213114754098,0,0,
0.760624512099922,0.00952380952380949,0,
0.75567525370804,0.0190476190476189,0,
0.752365339578454,0.0285714285714284,0,
0.749055425448868,0.0380952380952379,0,
0.745745511319282,0.0476190476190474,0,
0.742435597189695,0.0571428571428569,0,
0.740765027322404,0.0666666666666664,0,
0.737455113192818,0.0761904761904759,0,
0.735784543325526,0.0857142857142854,0,
0.734113973458235,0.0952380952380953,0,
0.732443403590944,0.104761904761904,0,
0.729102263856362,0.123809523809523,0,
0.730772833723653,0.114285714285714,0,
0.729071038251366,0.133333333333333,0,
0.72903981264637,0.142857142857142,0,
0.729008587041374,0.152380952380952,0,
0.727338017174083,0.161904761904761,0,
0.724028103044496,0.171428571428571,0,
0.720780640124902,0.161904761904761,0,
0.717533177205308,0.152380952380952,0,
0.717564402810304,0.142857142857142,0,
0.714285714285714,0.142857142857142,0,
0.711007025761124,0.142857142857142,0,
0.707728337236533,0.142857142857142,0,
0.704449648711943,0.142857142857142,0,
0.724340359094457,0.0761904761904759,0,
0.749258391881342,-0.0238095238095237,0,
0.752537080405932,-0.0238095238095237,0,
0.755815768930523,-0.0238095238095237,0,
0.759094457455113,-0.0238095238095237,0,
0.762373145979703,-0.0238095238095237,0,
0.765651834504293,-0.0238095238095237,0,
0.768930523028883,-0.0238095238095237,0,
0.773832943013271,-0.0190476190476189,0,
0.777096018735363,-0.0142857142857142,0,
0.77871975019516,-0.00952380952380949,0,
0.772193598750975,-0.0190476190476189,0,
0.780343481654957,-0.00476190476190474,0,
0.777049180327869,0,0,
0.773770491803278,0,0,
0.770491803278688,0,0,
0.721264637002342,0.0142857142857142,0,
0.726229508196721,0,0,
0.729523809523809,-0.00476190476190474,0,
0.739406713505074,-0.0190476190476189,0,
0.701170960187353,0.142857142857142,0,
0.701202185792349,0.133333333333333,0,
0.701233411397345,0.123809523809523,0,
0.701264637002342,0.114285714285714,0,
0.701295862607338,0.104761904761904,0,
0.701327088212334,0.0952380952380953,0,
0.70135831381733,0.0857142857142854,0,
0.703028883684621,0.0761904761904759,0,
0.732818110850897,-0.00952380952380949,0,
0.732818110850897,-0.00952380952380949,0

    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 74);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}

void drawEdgeShadowBelow()
{
    /*float FrontWheel1[] = {
0.157532051282051,0.422619047619047,0,
0.170032051282051,0.458333333333333,0,
0.196314102564102,0.50595238095238,0,
0.235416666666666,0.529761904761904,0,
0.274358974358974,0.547619047619047,0,
0.305608974358974,0.56547619047619,0,
0.325961538461538,0.607142857142857,0,
0.343910256410256,0.63095238095238,0,
0.360096153846153,0.660714285714285,0,
0.376282051282051,0.69047619047619,0,
0.388301282051282,0.708333333333333,0,
0.406410256410256,0.738095238095238,0,
0.420352564102564,0.75595238095238,0,
0.438221153846153,0.776785714285714,0,
0.455608974358974,0.779761904761904,0,
0.486378205128205,0.779761904761904,0,
0.53157051282051,0.779761904761904,0,
0.62780448717948,0.782738095238095,0,
0.65945512820512,0.779761904761904,0,
0.70176282051281,0.779761904761904,0,
0.716746794871784,0.764880952380953,0,
0.739102564102564,0.738095238095238,0,
0.761538461538461,0.714285714285714,0,
0.781570512820512,0.672619047619047,0,
0.792467948717948,0.648809523809524,0,
0.813782051282051,0.583333333333333,0,
0.822916666666666,0.56547619047619,0,
0.831891025641025,0.541666666666666,0,
0.85176282051282,0.494047619047619,0,
0.866185897435897,0.458333333333333,0,
0.868910256410256,0.416666666666666,0,
0.730288461538461,0.482142857142857,0,
0.661057692307692,0.482142857142857,0,
0.431570512820512,0.458333333333333,0,
0.304647435897435,0.458333333333333,0,
0.231410256410256,0.452380952380952,0,

    };*/
    float FrontWheel1[] = {
0.47503512880562,0.114285714285714,0,
0.47831381733021,0.114285714285714,0,
0.481592505854801,0.114285714285714,0,
0.484871194379391,0.114285714285714,0,
0.488149882903981,0.114285714285714,0,
0.491428571428571,0.114285714285714,0,
0.494707259953161,0.114285714285714,0,
0.497985948477751,0.114285714285714,0,
0.501264637002342,0.114285714285714,0,
0.504543325526932,0.114285714285714,0,
0.507822014051522,0.114285714285714,0,
0.511100702576112,0.114285714285714,0,
0.514379391100702,0.114285714285714,0,
0.517658079625292,0.114285714285714,0,
0.520936768149883,0.114285714285714,0,
0.524215456674473,0.114285714285714,0,
0.527494145199063,0.114285714285714,0,
0.530772833723653,0.114285714285714,0,
0.534051522248243,0.114285714285714,0,
0.537330210772833,0.114285714285714,0,
0.540608899297424,0.114285714285714,0,
0.543887587822014,0.114285714285714,0,
0.547166276346604,0.114285714285714,0,
0.550444964871194,0.114285714285714,0,
0.557002341920374,0.114285714285714,0,
0.553723653395784,0.114285714285714,0,
0.560281030444965,0.114285714285714,0,
0.563559718969555,0.114285714285714,0,
0.566838407494145,0.114285714285714,0,
0.570117096018735,0.114285714285714,0,
0.573395784543325,0.114285714285714,0,
0.576674473067915,0.114285714285714,0,
0.579953161592506,0.114285714285714,0,
0.583231850117096,0.114285714285714,0,
0.583231850117096,0.114285714285714,0,
0.586510538641686,0.114285714285714,0,
0.589789227166276,0.114285714285714,0,
0.593067915690866,0.114285714285714,0,
0.596346604215456,0.114285714285714,0,
0.599625292740047,0.114285714285714,0,
0.602903981264637,0.114285714285714,0,
0.606182669789227,0.114285714285714,0,
0.609461358313817,0.114285714285714,0,
0.612740046838407,0.114285714285714,0,
0.616018735362997,0.114285714285714,0,
0.619297423887587,0.114285714285714,0,
0.622576112412178,0.114285714285714,0,
0.625854800936768,0.114285714285714,0,
0.629133489461358,0.114285714285714,0,
0.632412177985948,0.114285714285714,0,
0.635690866510538,0.114285714285714,0,
0.638969555035128,0.114285714285714,0,
0.642248243559719,0.114285714285714,0,
0.645526932084309,0.114285714285714,0,
0.648805620608899,0.114285714285714,0,
0.652084309133489,0.114285714285714,0,
0.655362997658079,0.114285714285714,0,
0.658641686182669,0.114285714285714,0,
0.66192037470726,0.114285714285714,0,
0.66519906323185,0.114285714285714,0,
0.66847775175644,0.114285714285714,0,
0.67175644028103,0.114285714285714,0,
0.67503512880562,0.114285714285714,0,
0.67831381733021,0.114285714285714,0,
0.681592505854801,0.114285714285714,0,
0.684871194379391,0.114285714285714,0,
0.688149882903981,0.114285714285714,0,
0.691428571428571,0.114285714285714,0,
0.694707259953161,0.114285714285714,0,
0.697985948477751,0.114285714285714,0,
0.701264637002342,0.114285714285714,0,
0.704543325526932,0.114285714285714,0,
0.70775956284153,0.133333333333333,0,
0.474972677595628,0.133333333333333,0,
0.478251366120218,0.133333333333333,0,
0.481530054644808,0.133333333333333,0,
0.484808743169398,0.133333333333333,0,
0.488087431693989,0.133333333333333,0,
0.491366120218579,0.133333333333333,0,
0.494644808743169,0.133333333333333,0,
0.497923497267759,0.133333333333333,0,
0.501202185792349,0.133333333333333,0,
0.504480874316939,0.133333333333333,0,
0.50775956284153,0.133333333333333,0,
0.51103825136612,0.133333333333333,0,
0.51431693989071,0.133333333333333,0,
0.5175956284153,0.133333333333333,0,
0.52087431693989,0.133333333333333,0,
0.52415300546448,0.133333333333333,0,
0.527431693989071,0.133333333333333,0,
0.530710382513661,0.133333333333333,0,
0.533989071038251,0.133333333333333,0,
0.537267759562841,0.133333333333333,0,
0.540546448087431,0.133333333333333,0,
0.543825136612021,0.133333333333333,0,
0.547103825136611,0.133333333333333,0,
0.550382513661202,0.133333333333333,0,
0.553661202185792,0.133333333333333,0,
0.556939890710382,0.133333333333333,0,
0.560218579234972,0.133333333333333,0,
0.563497267759563,0.133333333333333,0,
0.566775956284153,0.133333333333333,0,
0.570054644808743,0.133333333333333,0,
0.573333333333333,0.133333333333333,0,
0.576612021857923,0.133333333333333,0,
0.579890710382513,0.133333333333333,0,
0.583169398907104,0.133333333333333,0,
0.586448087431694,0.133333333333333,0,
0.589726775956284,0.133333333333333,0,
0.593005464480874,0.133333333333333,0,
0.596284153005464,0.133333333333333,0,
0.599562841530054,0.133333333333333,0,
0.602841530054644,0.133333333333333,0,
0.606120218579235,0.133333333333333,0,
0.609398907103825,0.133333333333333,0,
0.612677595628415,0.133333333333333,0,
0.615956284153005,0.133333333333333,0,
0.619234972677595,0.133333333333333,0,
0.622513661202185,0.133333333333333,0,
0.625792349726776,0.133333333333333,0,
0.629071038251366,0.133333333333333,0,
0.632349726775956,0.133333333333333,0,
0.635628415300546,0.133333333333333,0,
0.638907103825136,0.133333333333333,0,
0.642185792349726,0.133333333333333,0,
0.645464480874317,0.133333333333333,0,
0.648743169398907,0.133333333333333,0,
0.652021857923497,0.133333333333333,0,
0.655300546448087,0.133333333333333,0,
0.658579234972677,0.133333333333333,0,
0.661857923497267,0.133333333333333,0,
0.668415300546448,0.133333333333333,0,
0.665136612021857,0.133333333333333,0,
0.671693989071038,0.133333333333333,0,
0.674972677595628,0.133333333333333,0,
0.678251366120218,0.133333333333333,0,
0.681530054644808,0.133333333333333,0,
0.684808743169398,0.133333333333333,0,
0.688087431693989,0.133333333333333,0,
0.691366120218579,0.133333333333333,0,
0.694644808743169,0.133333333333333,0,
0.697923497267759,0.133333333333333,0,
0.701202185792349,0.133333333333333,0,
0.704480874316939,0.133333333333333,0,
0.625823575331772,0.123809523809523,0,
0.707822014051522,0.114285714285714,0,
0.711100702576112,0.114285714285714,0,
0.714379391100702,0.114285714285714,0,
0.717658079625292,0.114285714285714,0,
0.720936768149883,0.114285714285714,0,
0.724215456674473,0.114285714285714,0,
0.724153005464481,0.133333333333333,0,
0.71103825136612,0.133333333333333,0,
0.71431693989071,0.133333333333333,0,
0.7175956284153,0.133333333333333,0,
0.72087431693989,0.133333333333333,0,
0.47175644028103,0.114285714285714,0,
0.46847775175644,0.114285714285714,0,
0.46519906323185,0.114285714285714,0,
0.461935987509758,0.109523809523809,0,
0.457002341920374,0.114285714285714,0,
0.455331772053083,0.123809523809523,0,
0.458579234972677,0.133333333333333,0,
0.465136612021857,0.133333333333333,0,
0.468415300546448,0.133333333333333,0,
0.471693989071038,0.133333333333333,0,
0.461857923497267,0.133333333333333,0,
0.727494145199063,0.114285714285714,0,
0.737267759562841,0.133333333333333,0,
0.740577673692428,0.123809523809523,0,
0.740546448087431,0.133333333333333,0


    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(FrontWheel1), FrontWheel1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 171);
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
}

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "CSE 4208: Computer Graphics Laboratory", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }


    // build and compile our shader program
    // ------------------------------------
    // vertex shader
    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    unsigned int shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    // vertex shader2
    unsigned int vertexShader2 = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader2, 1, &vertexShaderSource2, NULL);
    glCompileShader(vertexShader2);

    // fragment shader2
    unsigned int fragmentShader2 = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader2, 1, &fragmentShaderSource2, NULL);
    glCompileShader(fragmentShader2);

    // link shaders2
    unsigned int shaderProgram2 = glCreateProgram();
    glAttachShader(shaderProgram2, vertexShader2);
    glAttachShader(shaderProgram2, fragmentShader2);
    glLinkProgram(shaderProgram2);

    glDeleteShader(vertexShader2);
    glDeleteShader(fragmentShader2);


    // vertex shader3
    unsigned int vertexShader3 = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader3, 1, &vertexShaderSource3, NULL);
    glCompileShader(vertexShader3);

    // fragment shader3
    unsigned int fragmentShader3 = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader3, 1, &fragmentShaderSource3, NULL);
    glCompileShader(fragmentShader3);

    // link shaders3
    unsigned int shaderProgram3 = glCreateProgram();
    glAttachShader(shaderProgram3, vertexShader3);
    glAttachShader(shaderProgram3, fragmentShader3);
    glLinkProgram(shaderProgram3);

    glDeleteShader(vertexShader3);
    glDeleteShader(fragmentShader3);


    // vertex shader4
    unsigned int vertexShader4 = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader4, 1, &vertexShaderSource4, NULL);
    glCompileShader(vertexShader4);

    // fragment shader4
    unsigned int fragmentShader4 = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader4, 1, &fragmentShaderSource4, NULL);
    glCompileShader(fragmentShader4);

    // link shaders4
    unsigned int shaderProgram4 = glCreateProgram();
    glAttachShader(shaderProgram4, vertexShader4);
    glAttachShader(shaderProgram4, fragmentShader4);
    glLinkProgram(shaderProgram4);

    glDeleteShader(vertexShader4);
    glDeleteShader(fragmentShader4);

    // vertex shader5
    unsigned int vertexShader5 = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader5, 1, &vertexShaderSource5, NULL);
    glCompileShader(vertexShader5);

    // fragment shader5
    unsigned int fragmentShader5 = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader5, 1, &fragmentShaderSource5, NULL);
    glCompileShader(fragmentShader5);

    // link shaders5
    unsigned int shaderProgram5 = glCreateProgram();
    glAttachShader(shaderProgram5, vertexShader5);
    glAttachShader(shaderProgram5, fragmentShader5);
    glLinkProgram(shaderProgram5);

    glDeleteShader(vertexShader5);
    glDeleteShader(fragmentShader5);

    // vertex shader6
    unsigned int vertexShader6 = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader6, 1, &vertexShaderSource6, NULL);
    glCompileShader(vertexShader6);

    // fragment shader6
    unsigned int fragmentShader6 = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader6, 1, &fragmentShaderSource6, NULL);
    glCompileShader(fragmentShader6);

    // link shaders6
    unsigned int shaderProgram6 = glCreateProgram();
    glAttachShader(shaderProgram6, vertexShader6);
    glAttachShader(shaderProgram6, fragmentShader6);
    glLinkProgram(shaderProgram6);

    glDeleteShader(vertexShader6);
    glDeleteShader(fragmentShader6);
    // vertex shader31
    unsigned int vertexShader31 = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader31, 1, &vertexShaderSource31, NULL);
    glCompileShader(vertexShader31);

    // fragment shader31
    unsigned int fragmentShader31 = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader31, 1, &fragmentShaderSource31, NULL);
    glCompileShader(fragmentShader31);

    // link shaders31
    unsigned int shaderProgram31 = glCreateProgram();
    glAttachShader(shaderProgram31, vertexShader31);
    glAttachShader(shaderProgram31, fragmentShader31);
    glLinkProgram(shaderProgram31);

    glDeleteShader(vertexShader31);
    glDeleteShader(fragmentShader31);


    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------
    float vertices[] = {
        -0.5f, -0.5f, 0.0f, // left  
         0.5f, -0.5f, 0.0f, // right 
         0.0f,  0.5f, 0.0f  // top   
    };



    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);




    // uncomment this call to draw in wireframe polygons.
   //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------screen background color
        glClearColor(0.7f, 0.7f, 1.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);
        glm::mat4 translationMatrix;
        glm::mat4 rotationMatrix;
        glm::mat4 scaleMatrix;
        glm::mat4 modelMatrix;
        glm::mat4 identityMatrix = glm::mat4(1.0f);
        translationMatrix = glm::translate(identityMatrix, glm::vec3(translate_X, translate_Y, 0.0f));
        rotationMatrix = glm::rotate(identityMatrix, glm::radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        scaleMatrix = glm::scale(identityMatrix, glm::vec3(scale_X, scale_Y, 1.0f));
        modelMatrix = translationMatrix * rotationMatrix * scaleMatrix;
        //modelMatrix = identityMatrix;

        // draw our first triangle
        glUseProgram(shaderProgram);
        unsigned int transformLoc = glGetUniformLocation(shaderProgram, "transform");
        glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(modelMatrix));

        glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
        //glDrawArrays(GL_TRIANGLES, 0, 3);
       // glDrawArrays(GL_LINE_STRIP, 0, 144);
        // glBindVertexArray(0); // no need to unbind it every time 



        glUseProgram(shaderProgram5);
        unsigned int transformLoc10 = glGetUniformLocation(shaderProgram5, "transform");
        glUniformMatrix4fv(transformLoc10, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        carBody();



        glUseProgram(shaderProgram31);
        unsigned int transformLoc311 = glGetUniformLocation(shaderProgram31, "transform");
        glUniformMatrix4fv(transformLoc311, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        uppercarBody();
        glUseProgram(shaderProgram6);
        unsigned int transformLoc11 = glGetUniformLocation(shaderProgram6, "transform");
        glUniformMatrix4fv(transformLoc11, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        frontGlass();
        sideGlass();
        glUseProgram(shaderProgram4);
        unsigned int transformLoc12 = glGetUniformLocation(shaderProgram4, "transform");
        glUniformMatrix4fv(transformLoc12, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        front();
        glUseProgram(shaderProgram3);
        unsigned int transformLoc13 = glGetUniformLocation(shaderProgram3, "transform");
        glUniformMatrix4fv(transformLoc13, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        frontWhite();
        sideWhite();
        //sideLookingGlassHandle();

        //glUseProgram(shaderProgram);
        //unsigned int transformLoc14 = glGetUniformLocation(shaderProgram, "transform");
        //glUniformMatrix4fv(transformLoc14, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        //// sideLookingGlass();




        glUseProgram(shaderProgram4);
        unsigned int transformLoc5 = glGetUniformLocation(shaderProgram4, "transform");
        glUniformMatrix4fv(transformLoc5, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        drawFrontWheelInsideCircle4();
        drawFrontWheelInsideCircle5();
        //drawFrontWheelInsideCircle6();
        drawFrontWheelInsideCircle8();

        glUseProgram(shaderProgram2);
        unsigned int transformLoc4 = glGetUniformLocation(shaderProgram2, "transform");
        glUniformMatrix4fv(transformLoc4, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        drawFrontWheelInsideCircle3();

        glUseProgram(shaderProgram3);
        unsigned int transformLoc3 = glGetUniformLocation(shaderProgram3, "transform");
        glUniformMatrix4fv(transformLoc3, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        drawFrontWheelInsideCircle2();

        glUseProgram(shaderProgram2);
        unsigned int transformLoc2 = glGetUniformLocation(shaderProgram2, "transform");
        glUniformMatrix4fv(transformLoc2, 1, GL_FALSE, glm::value_ptr(modelMatrix));

        drawFrontWheelInsideCircle();


        // scaleMatrix = glm::scale(identityMatrix, glm::vec3(0.0f, 0.00f, 1.0f));

        // rotationMatrix = glm::rotate(identityMatrix, glm::radians(0.0f), glm::vec3(0.0f, 0.0f, 1.0f));


        translationMatrix = glm::translate(identityMatrix, glm::vec3(0.065f, 0.04f, 0.0f));
        glUseProgram(shaderProgram4);
        unsigned int transformLoc9 = glGetUniformLocation(shaderProgram4, "transform");
        glUniformMatrix4fv(transformLoc9, 1, GL_FALSE, glm::value_ptr(modelMatrix * translationMatrix));
        drawWheelShadowBack();

        translationMatrix = glm::translate(identityMatrix, glm::vec3(0.047f, 0.04f, 0.0f));
        glUseProgram(shaderProgram4);
        unsigned int transformLoc92 = glGetUniformLocation(shaderProgram4, "transform");
        glUniformMatrix4fv(transformLoc92, 1, GL_FALSE, glm::value_ptr(modelMatrix * translationMatrix));
        drawEdgeShadowBelow();

        glUseProgram(shaderProgram4);
        unsigned int transformLoc91 = glGetUniformLocation(shaderProgram4, "transform");
        glUniformMatrix4fv(transformLoc91, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        drawFrontWheelInsideCircle7();

        translationMatrix = glm::translate(identityMatrix, glm::vec3(0.4f, -0.02f, 0.0f));

        glUseProgram(shaderProgram2);
        unsigned int transformLoc6 = glGetUniformLocation(shaderProgram2, "transform");
        glUniformMatrix4fv(transformLoc6, 1, GL_FALSE, glm::value_ptr(modelMatrix * translationMatrix));
        drawFrontWheelInsideCircle3();

        glUseProgram(shaderProgram3);
        unsigned int transformLoc7 = glGetUniformLocation(shaderProgram3, "transform");
        glUniformMatrix4fv(transformLoc7, 1, GL_FALSE, glm::value_ptr(modelMatrix * translationMatrix));
        drawFrontWheelInsideCircle2();

        glUseProgram(shaderProgram2);
        unsigned int transformLoc8 = glGetUniformLocation(shaderProgram2, "transform");
        glUniformMatrix4fv(transformLoc8, 1, GL_FALSE, glm::value_ptr(modelMatrix * translationMatrix));

        drawFrontWheelInsideCircle();


        // edit portion
        translationMatrix = glm::translate(identityMatrix, glm::vec3(-0.79f, -0.79f, 0.0f));
        rotationMatrix = glm::rotate(identityMatrix, glm::radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        scaleMatrix = glm::scale(identityMatrix, glm::vec3(scale_X, scale_Y, 1.0f));
        modelMatrix = translationMatrix * rotationMatrix * scaleMatrix;

        glUseProgram(shaderProgram4);
        unsigned int transformLoc1141 = glGetUniformLocation(shaderProgram4, "transform");
        glUniformMatrix4fv(transformLoc1141, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        drawFrontWheelInsideCircle6();

        translationMatrix = glm::translate(identityMatrix, glm::vec3(-0.8123f, -0.8123f, 0.0f));
        modelMatrix = translationMatrix * rotationMatrix * scaleMatrix;
        glUseProgram(shaderProgram3);
        unsigned int transformLoc11411 = glGetUniformLocation(shaderProgram3, "transform");
        glUniformMatrix4fv(transformLoc11411, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        sideLookingGlassHandle();
        glUseProgram(shaderProgram);
        transformLoc11411 = glGetUniformLocation(shaderProgram, "transform");
        glUniformMatrix4fv(transformLoc11411, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        sideLookingGlass();
        //edit portion finished



        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // optional: de-allocate all resources once they've outlived their purpose:
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteProgram(shaderProgram);
    glDeleteProgram(shaderProgram2);
    glDeleteProgram(shaderProgram3);
    glDeleteProgram(shaderProgram4);
    glDeleteProgram(shaderProgram5);
    glDeleteProgram(shaderProgram6);
    glDeleteProgram(shaderProgram31);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
    if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS)
    {
        rotateAngle += 1;
    }
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and 
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}
